{
  "uid" : "abdfbb3dff6e63b6",
  "name" : "test_customer_list[customer_list8]",
  "fullName" : "testcase.test_wms_customer_list_002.TestCustomer#test_customer_list",
  "historyId" : "95720d57d035203d5aeb76aadfc5cb05",
  "time" : {
    "start" : 1716733564320,
    "stop" : 1716733564537,
    "duration" : 217
  },
  "description" : "接口测试用例",
  "descriptionHtml" : "<p>接口测试用例</p>\n",
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 3 == 1",
  "statusTrace" : "self = <wms_python_yaml.testcase.test_wms_customer_list_002.TestCustomer object at 0x000002B6171946A0>\ncustomer_list = {'address': None, 'customerLevel': '第一级', 'customerName': None, 'customerNo': None, ...}\n\n    @allure.description(\"接口测试用例\")\n    @allure.severity(\"Critical\")\n    @pytest.mark.parametrize(\"customer_list\",\n                             YamlUtils.read_yaml(yaml_file(\"test_customer_list.yaml\"), \"case_customer_list\"))\n    def test_customer_list(self, customer_list):\n        response = requests.post(url=\"http://60.204.225.104:9632/wms/customer/list?page=0&size=10\",\n                                 json={\"customerNo\": customer_list[\"customerNo\"],\n                                       \"customerName\": customer_list[\"customerName\"],\n                                       \"address\": customer_list[\"address\"],\n                                       \"mobile\": customer_list[\"mobile\"],\n                                       \"tel\": customer_list[\"tel\"],\n                                       \"customerPerson\": customer_list[\"customerPerson\"],\n                                       \"customerLevel\": customer_list[\"customerLevel\"],\n                                       \"email\": customer_list[\"email\"]},\n                                 headers={\"Authorization\": get_wms_token()})\n        res = response.json()\n        print(res)\n        if res[\"content\"][0][\"customerNo\"] == customer_list[\"exp\"]:\n            count = self.db.find_count(\"SELECT * FROM wms_customer WHERE customer_no = %s\", (customer_list[\"exp\"],))\n            assert count == 1\n            logger.info(\"接口响应符合预期，用例执行成功，请求参数是：%s\", customer_list)\n        elif res[\"content\"][0][\"customerName\"] == customer_list[\"exp\"]:\n            count = self.db.find_count(\"SELECT * FROM wms_customer WHERE customer_name = %s\", (customer_list[\"exp\"],))\n            assert count == 1\n            logger.info(\"接口响应符合预期，用例执行成功，请求参数是：%s\", customer_list)\n    \n        elif res[\"content\"][0][\"address\"] == customer_list[\"exp\"]:\n            count = self.db.find_count(\"SELECT * FROM wms_customer WHERE address = %s\", (customer_list[\"exp\"],))\n            assert count == 1\n            logger.info(\"接口响应符合预期，用例执行成功，请求参数是：%s\", customer_list)\n    \n        elif res[\"content\"][0][\"mobile\"] == customer_list[\"exp\"]:\n            count = self.db.find_count(\"SELECT * FROM wms_customer WHERE mobile = %s\", (customer_list[\"exp\"],))\n            assert count == 1\n            logger.info(\"接口响应符合预期，用例执行成功，请求参数是：%s\", customer_list)\n    \n        elif res[\"content\"][0][\"tel\"] == customer_list[\"exp\"]:\n            count = self.db.find_count(\"SELECT * FROM wms_customer WHERE tel = %s\", (customer_list[\"exp\"],))\n            assert count == 1\n            logger.info(\"接口响应符合预期，用例执行成功，请求参数是：%s\", res)\n    \n        elif res[\"content\"][0][\"customerPerson\"] == customer_list[\"exp\"]:\n            count = self.db.find_count(\"SELECT * FROM wms_customer WHERE customer_person = %s\", (customer_list[\"exp\"],))\n>           assert count == 1\nE           assert 3 == 1\n\ntestcase\\test_wms_customer_list_002.py:71: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "conn_db",
    "time" : {
      "start" : 1716733564282,
      "stop" : 1716733564319,
      "duration" : 37
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "testStage" : {
    "description" : "接口测试用例",
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 3 == 1",
    "statusTrace" : "self = <wms_python_yaml.testcase.test_wms_customer_list_002.TestCustomer object at 0x000002B6171946A0>\ncustomer_list = {'address': None, 'customerLevel': '第一级', 'customerName': None, 'customerNo': None, ...}\n\n    @allure.description(\"接口测试用例\")\n    @allure.severity(\"Critical\")\n    @pytest.mark.parametrize(\"customer_list\",\n                             YamlUtils.read_yaml(yaml_file(\"test_customer_list.yaml\"), \"case_customer_list\"))\n    def test_customer_list(self, customer_list):\n        response = requests.post(url=\"http://60.204.225.104:9632/wms/customer/list?page=0&size=10\",\n                                 json={\"customerNo\": customer_list[\"customerNo\"],\n                                       \"customerName\": customer_list[\"customerName\"],\n                                       \"address\": customer_list[\"address\"],\n                                       \"mobile\": customer_list[\"mobile\"],\n                                       \"tel\": customer_list[\"tel\"],\n                                       \"customerPerson\": customer_list[\"customerPerson\"],\n                                       \"customerLevel\": customer_list[\"customerLevel\"],\n                                       \"email\": customer_list[\"email\"]},\n                                 headers={\"Authorization\": get_wms_token()})\n        res = response.json()\n        print(res)\n        if res[\"content\"][0][\"customerNo\"] == customer_list[\"exp\"]:\n            count = self.db.find_count(\"SELECT * FROM wms_customer WHERE customer_no = %s\", (customer_list[\"exp\"],))\n            assert count == 1\n            logger.info(\"接口响应符合预期，用例执行成功，请求参数是：%s\", customer_list)\n        elif res[\"content\"][0][\"customerName\"] == customer_list[\"exp\"]:\n            count = self.db.find_count(\"SELECT * FROM wms_customer WHERE customer_name = %s\", (customer_list[\"exp\"],))\n            assert count == 1\n            logger.info(\"接口响应符合预期，用例执行成功，请求参数是：%s\", customer_list)\n    \n        elif res[\"content\"][0][\"address\"] == customer_list[\"exp\"]:\n            count = self.db.find_count(\"SELECT * FROM wms_customer WHERE address = %s\", (customer_list[\"exp\"],))\n            assert count == 1\n            logger.info(\"接口响应符合预期，用例执行成功，请求参数是：%s\", customer_list)\n    \n        elif res[\"content\"][0][\"mobile\"] == customer_list[\"exp\"]:\n            count = self.db.find_count(\"SELECT * FROM wms_customer WHERE mobile = %s\", (customer_list[\"exp\"],))\n            assert count == 1\n            logger.info(\"接口响应符合预期，用例执行成功，请求参数是：%s\", customer_list)\n    \n        elif res[\"content\"][0][\"tel\"] == customer_list[\"exp\"]:\n            count = self.db.find_count(\"SELECT * FROM wms_customer WHERE tel = %s\", (customer_list[\"exp\"],))\n            assert count == 1\n            logger.info(\"接口响应符合预期，用例执行成功，请求参数是：%s\", res)\n    \n        elif res[\"content\"][0][\"customerPerson\"] == customer_list[\"exp\"]:\n            count = self.db.find_count(\"SELECT * FROM wms_customer WHERE customer_person = %s\", (customer_list[\"exp\"],))\n>           assert count == 1\nE           assert 3 == 1\n\ntestcase\\test_wms_customer_list_002.py:71: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "2d6b81d7c2183402",
      "name" : "log",
      "source" : "2d6b81d7c2183402.txt",
      "type" : "text/plain",
      "size" : 695
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1,
    "hasContent" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ {
    "name" : "conn_db::0",
    "time" : {
      "start" : 1716733564584,
      "stop" : 1716733564585,
      "duration" : 1
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0,
    "hasContent" : false,
    "stepsCount" : 0
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "Critical"
  }, {
    "name" : "feature",
    "value" : "wms仓管系统-查询用户接口"
  }, {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "test_wms_customer_list_002"
  }, {
    "name" : "subSuite",
    "value" : "TestCustomer"
  }, {
    "name" : "host",
    "value" : "MS-ZTCNWBTJJGHS"
  }, {
    "name" : "thread",
    "value" : "22236-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.test_wms_customer_list_002"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "customer_list",
    "value" : "{'customerNo': None, 'customerName': None, 'address': None, 'mobile': None, 'tel': None, 'customerPerson': '张三', 'customerLevel': '第一级', 'email': None, 'exp': '张三', 'exp2': '第一级'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "critical",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "abdfbb3dff6e63b6.json",
  "parameterValues" : [ "{'customerNo': None, 'customerName': None, 'address': None, 'mobile': None, 'tel': None, 'customerPerson': '张三', 'customerLevel': '第一级', 'email': None, 'exp': '张三', 'exp2': '第一级'}" ]
}